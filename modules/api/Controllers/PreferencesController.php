<?php/*  * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */ class Preferences{    protected $_request;	protected $_queryStr;	protected $_rawBody;	protected $_method;		public function __construct() {		// i am using ZEND 1.11 		// if ZEND 2, you should use Zend\Http\Request		// use this Zend Request Class as it does 		// most of the hard work for a web Request 		$this->_request = new Zend_Controller_Request_Http();				$this->_method = $this->_request->getMethod();				$func = strtolower(trim(str_replace("/","",$this->_method)));		if((int)method_exists($this,$func) <= 0) 		{		    //when a client makes a request using an unknown HTTP verb			header('HTTP/1.1 501 Not Implemented');			exit();		}				$this->_queryStr = $this->_request->getQuery();		$this->_rawBody = $this->_request->getRawBody();	}		protected function CreateItemNodes(&$root_element,&$doc,$preference)	{		global $LANG;			$id = $doc->createElement("pref_id");		$id->appendChild($doc->createTextNode($preference['pref_id']));		$root_element->appendChild($id);		//$domain_id = $doc->createElement("domain_id");		//$domain_id->appendChild($doc->createTextNode($preference['domain_id']));		//$root_element->appendChild($domain_id);				$pref_description = $doc->createElement("pref_description");		$pref_description->appendChild($doc->createTextNode($preference['pref_description']));		$root_element->appendChild($pref_description);				$pref_currency_sign = $doc->createElement("pref_currency_sign");		$pref_currency_sign->appendChild($doc->createTextNode($preference['pref_currency_sign']));		$root_element->appendChild($pref_currency_sign);				$pref_inv_heading = $doc->createElement("pref_inv_heading");		$pref_inv_heading->appendChild($doc->createTextNode($preference['pref_inv_heading']));		$root_element->appendChild($pref_inv_heading);				$pref_inv_wording = $doc->createElement("pref_inv_wording");		$pref_inv_wording->appendChild($doc->createTextNode($preference['pref_inv_wording']));		$root_element->appendChild($pref_inv_wording);				$pref_inv_detail_heading = $doc->createElement("pref_inv_detail_heading");		$pref_inv_detail_heading->appendChild($doc->createTextNode($preference['pref_inv_detail_heading']));		$root_element->appendChild($pref_inv_detail_heading);				$pref_inv_detail_line = $doc->createElement("pref_inv_detail_line");		$pref_inv_detail_line->appendChild($doc->createTextNode($preference['pref_inv_detail_line']));		$root_element->appendChild($pref_inv_detail_line);		$pref_inv_payment_method = $doc->createElement("pref_inv_payment_method");		$pref_inv_payment_method->appendChild($doc->createTextNode($preference['pref_inv_payment_method']));		$root_element->appendChild($pref_inv_payment_method);				$pref_inv_payment_line1_name = $doc->createElement("pref_inv_payment_line1_name");		$pref_inv_payment_line1_name->appendChild($doc->createTextNode($preference['pref_inv_payment_line1_name']));		$root_element->appendChild($pref_inv_payment_line1_name);				$pref_inv_payment_line1_value = $doc->createElement("pref_inv_payment_line1_value");		$pref_inv_payment_line1_value->appendChild($doc->createTextNode($preference['pref_inv_payment_line1_value']));		$root_element->appendChild($pref_inv_payment_line1_value);				$pref_inv_payment_line2_name = $doc->createElement("pref_inv_payment_line2_name");		$pref_inv_payment_line2_name->appendChild($doc->createTextNode($preference['pref_inv_payment_line2_name']));		$root_element->appendChild($pref_inv_payment_line2_name);				$pref_inv_payment_line2_value = $doc->createElement("pref_inv_payment_line2_value");		$pref_inv_payment_line2_value->appendChild($doc->createTextNode($preference['pref_inv_payment_line2_value']));		$root_element->appendChild($pref_inv_payment_line2_value);		if ($preference[enabled] === $LANG['enabled']) 		{			$preference[enabled] = 1;		} 		else if($preference[enabled] === $LANG['disabled'])		{			$preference[enabled] = 0;		}				$enabled = $doc->createElement("pref_enabled");		$enabled->appendChild($doc->createTextNode($preference['enabled']));		$root_element->appendChild($enabled);				$status = $doc->createElement("status");		$status->appendChild($doc->createTextNode($preference['status']));		$root_element->appendChild($status);				$locale = $doc->createElement("locale");		$locale->appendChild($doc->createTextNode($preference['locale']));		$root_element->appendChild($locale);				$language = $doc->createElement("language");		$language->appendChild($doc->createTextNode($preference['language']));		$root_element->appendChild($language);				$index_group = $doc->createElement("index_group");		$index_group->appendChild($doc->createTextNode($preference['index_group']));		$root_element->appendChild($index_group);				$currency_code = $doc->createElement("currency_code");		$currency_code->appendChild($doc->createTextNode($preference['currency_code']));		$root_element->appendChild($currency_code);				$include_online_payment = $doc->createElement("include_online_payment");		$include_online_payment->appendChild($doc->createTextNode($preference['include_online_payment']));		$root_element->appendChild($include_online_payment);				$currency_position = $doc->createElement("currency_position");		$currency_position->appendChild($doc->createTextNode($preference['currency_position']));		$root_element->appendChild($currency_position);	}		protected function CreatePostBody($preferences)	{		$_POST[pref_description]=(string)$preferences->pref_description;		$_POST[pref_currency_sign]=(string)$preferences->pref_currency_sign;		$_POST[pref_inv_heading]=(string)$preferences->pref_inv_heading;		$_POST[pref_inv_wording]=(string)$preferences->pref_inv_wording;		$_POST[pref_inv_detail_heading]=(string)$preferences->pref_inv_detail_heading;		$_POST[pref_inv_detail_line]=(string)$preferences->pref_inv_detail_line;		$_POST[pref_inv_payment_method]=(string)$preferences->pref_inv_payment_method;		$_POST[pref_inv_payment_line1_name]=(string)$preferences->pref_inv_payment_line1_name;		$_POST[pref_inv_payment_line1_value]=(string)$preferences->pref_inv_payment_line1_value;		$_POST[pref_inv_payment_line2_name]=(string)$preferences->pref_inv_payment_line2_name;		$_POST[pref_inv_payment_line2_value]=(string)$preferences->pref_inv_payment_line2_value;		$_POST[pref_enabled]=(string)$preferences->pref_enabled;		$_POST[status]=(string)$preferences->status;		$_POST[locale]=(string)$preferences->locale;		$_POST[language]=(string)$preferences->language;		$_POST[index_group]=(string)$preferences->index_group;		$_POST[currency_code]=(string)$preferences->currency_code;		// paypal,eway_merchant_xml - in this format		$_POST[include_online_payment]=(string)$preferences->include_online_payment;		$_POST[currency_position]=(string)$preferences->currency_position;				//use mb_strlen instead of strlen because of cyrillic characters		if (trim($_POST[pref_description])=="" || mb_strlen($_POST[pref_description])>50)		{		    return "Inavlid length of description!";		}		if (mb_strlen($_POST[currency_code])>25)		{			return "Inavlid length of currency_code!";		}		if (mb_strlen($_POST[currency_position])>25)		{			return "Inavlid length of currency_position!";		}		if (mb_strlen($_POST[pref_currency_sign])>50)		{			return "Inavlid length of pref_currency_sign!";		}		if (mb_strlen($_POST[pref_inv_heading])>50)		{			return "Inavlid length of pref_inv_heading!";		}		if (mb_strlen($_POST[pref_inv_wording])>50)		{			return "Inavlid length of pref_inv_wording!";		}		if (mb_strlen($_POST[pref_inv_detail_heading])>60) //utf8_decode		{			return "Inavlid length of pref_inv_detail_heading!"; 		}		if (mb_strlen($_POST[pref_inv_payment_method])>50)		{			return "Inavlid length of pref_inv_payment_method!";		}		if (mb_strlen($_POST[pref_inv_payment_line1_name])>50)		{			return "Inavlid length of pref_inv_payment_line1_name!";		}		if (mb_strlen($_POST[pref_inv_payment_line1_value])>50)		{			return "Inavlid length of pref_inv_payment_line1_value!";		}		if (mb_strlen($_POST[pref_inv_payment_line2_name])>50)		{			return "Inavlid length of pref_inv_payment_line2_name!";		}		if (mb_strlen($_POST[pref_inv_payment_line2_value])>50)		{			return "Inavlid length of pref_inv_payment_line2_value!";		}		if (trim($_POST[index_group])!="" && !is_numeric($_POST[index_group]))		{		    return "Not numeric index_group field!";		}		if (!is_numeric($_POST[status]) || $_POST[status]>=2 || $_POST[status]<0)		{			return "Inavlid status field!";		}		if (!is_numeric($_POST[pref_enabled]) || $_POST[pref_enabled]>=2 || $_POST[pref_enabled]<0)		{			return "Inavlid enabled field!";		}				return "";	}		protected function IncludeOnlinePayment()	{	    $include_online_payment ='';		foreach ($_POST['include_online_payment'] as $k => $v) {			$include_online_payment .= $v;			if ($k !=  end(array_keys($_POST['include_online_payment'])))			{				$include_online_payment .= ','; 			}		}		return $include_online_payment;	}		protected function insertPreference()	{		global $auth_session;		//$include_online_payment=$this->IncludeOnlinePayment();				$sql = "INSERT into			".TB_PREFIX."preferences			(				domain_id,				pref_description,				pref_currency_sign,				currency_code,				pref_inv_heading,				pref_inv_wording,				pref_inv_detail_heading,				pref_inv_detail_line,				pref_inv_payment_method,				pref_inv_payment_line1_name,				pref_inv_payment_line1_value,				pref_inv_payment_line2_name,				pref_inv_payment_line2_value,				pref_enabled,					status,					locale,					language,					index_group,				include_online_payment			)		VALUES			(				:domain_id,				:description,				:currency_sign,				:currency_code,				:heading,				:wording,				:detail_heading,				:detail_line,				:payment_method,				:payment_line1_name,				:payment_line1_value,				:payment_line2_name,				:payment_line2_value,				:enabled,				:status,				:locale,				:language,				:index_group,				:include_online_payment			 )";		if (dbQuery($sql,		  ':domain_id', $auth_session->domain_id,		  ':description', $_POST['pref_description'],		  ':currency_sign', $_POST['pref_currency_sign'],		  ':currency_code', $_POST['currency_code'],		  ':heading', $_POST['pref_inv_heading'],		  ':wording', $_POST['pref_inv_wording'],		  ':detail_heading', $_POST['pref_inv_detail_heading'],		  ':detail_line', $_POST['pref_inv_detail_line'],		  ':payment_method', $_POST['pref_inv_payment_method'],		  ':payment_line1_name', $_POST['pref_inv_payment_line1_name'],		  ':payment_line1_value', $_POST['pref_inv_payment_line1_value'],		  ':payment_line2_name', $_POST['pref_inv_payment_line2_name'],		  ':payment_line2_value', $_POST['pref_inv_payment_line2_value'],		  ':status', $_POST['status'],		  ':locale', $_POST['locale'],		  ':language', $_POST['language'],		  ':index_group', empty($_POST['index_group']) ? lastInsertId() : $_POST['index_group']  ,		  ':include_online_payment', $_POST[include_online_payment], //$include_online_payment		  ':enabled', $_POST['pref_enabled']		  )) {			$saved = true;						if (empty($_POST['index_group']))			{				$sql_update = "UPDATE						".TB_PREFIX."preferences					SET						index_group = :index_group					WHERE 						pref_id = :pref_id				";				dbQuery($sql_update, 					':index_group',lastInsertId(),					':pref_id',lastInsertId()				);			}		} ELSE {			$saved = false;		}		return $saved;	}		protected function updatePreference()	{		//$include_online_payment=$this->IncludeOnlinePayment();				$sql = "UPDATE				".TB_PREFIX."preferences			SET				pref_description = :description,				pref_currency_sign = :currency_sign,				currency_code = :currency_code,				pref_inv_heading = :heading,				pref_inv_wording = :wording,				pref_inv_detail_heading = :detail_heading,				pref_inv_detail_line = :detail_line,				pref_inv_payment_method = :payment_method,				pref_inv_payment_line1_name = :line1_name,				pref_inv_payment_line1_value = :line1_value,				pref_inv_payment_line2_name = :line2_name,				pref_inv_payment_line2_value = :line2_value,				pref_enabled = :enabled,				status = :status,				locale = :locale,				language = :language, 		        index_group = :index_group, 		        include_online_payment = :include_online_payment			WHERE				pref_id = :id";		if (dbQuery($sql, 		  ':description', $_POST['pref_description'],		  ':currency_sign', $_POST['pref_currency_sign'],		  ':currency_code', $_POST['currency_code'],		  ':heading', $_POST['pref_inv_heading'],		  ':wording', $_POST['pref_inv_wording'],		  ':detail_heading', $_POST['pref_inv_detail_heading'],		  ':detail_line', $_POST['pref_inv_detail_line'],		  ':payment_method', $_POST['pref_inv_payment_method'],		  ':line1_name', $_POST['pref_inv_payment_line1_name'],		  ':line1_value', $_POST['pref_inv_payment_line1_value'],		  ':line2_name', $_POST['pref_inv_payment_line2_name'],		  ':line2_value', $_POST['pref_inv_payment_line2_value'],		  ':enabled', $_POST['pref_enabled'],		  ':status', $_POST['status'],		  ':locale', $_POST['locale'],          ':language', $_POST['language'],		  ':index_group', $_POST['index_group'],		  ':include_online_payment', $_POST[include_online_payment], //$include_online_payment		  ':id', $_GET['id']))	    {			$saved =true;		} else {			$saved = false;		}		return $saved;	}		protected function GetPreference($ID)	{		$preference;		try		{			$preference = getPreference($ID);		}		catch (Exception $e)		{			//An unexpected error occurred			header('HTTP/1.1 500 Internal Server Error');			exit();		}				if(!isset($preference['pref_id']))		{			//No resource at the specified URL			header('HTTP/1.1 404 Not Found');			exit();		}		$doc = new DOMDocument('1.0','UTF-8');		$doc->formatOutput = true;				$root_element = $doc->createElement("preference");		$doc->appendChild($root_element);		try		{			$this->CreateItemNodes($root_element,$doc,$preference);		}		catch (Exception $e)		{			//An unexpected error occurred			header('HTTP/1.1 500 Internal Server Error');			exit();		}		//$xml = $doc->saveXML();		//$xml = simplexml_load_string($xml);				return $doc;//$xml;	}		public  function index()	{	  $doc = new DOMDocument('1.0','UTF-8');	  $doc->formatOutput = true;	  	  $root_element = $doc->createElement("preferences");	  $doc->appendChild($root_element);	  	  if($this->_method!="GET")	  {     	        //when a client makes a request using an HTTP verb not supported at the requested URL 			//(supported verbs are returned in the Allow header)			header('HTTP/1.1 405 Method Not Allowed');			exit();	  }	  if(isset($this->_queryStr['id']))	  {	        //Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request');			exit();	  }	  	  $preferences=array();	  	  try{			$preferences=getPreferences();	  }	  catch (Exception $e){			//An unexpected error occurred			header('HTTP/1.1 500 Internal Server Error');			exit();	  }	  	  if(count($preferences)<=0)	  {			//Successful request when no data is returned			header('HTTP/1.1 204 No Content');			exit();	  }	  	  foreach ($preferences as $preference)	  {	    $itemNode = $doc->createElement("preference");		$itemNode = $root_element->appendChild($itemNode);		try		{			$this->CreateItemNodes($itemNode,$doc,$preference);		}		catch (Exception $e)		{			//An unexpected error occurred			header('HTTP/1.1 500 Internal Server Error');			exit();		}	  }		  return $doc;	  //var_export($doc->saveXML(), true);	}		public function get()	{		// we will dump the query_string		// with a message from GET METHOD		// if we get a get call		// $this->_request->getQuery()		// will return the $_SERVER['QUERY_STRING'] value				if($this->_method!="GET")		{     			//when a client makes a request using an HTTP verb not supported at the requested URL 			//(supported verbs are returned in the Allow header)			header('HTTP/1.1 405 Method Not Allowed');			exit();		}		if(!isset($this->_queryStr) || !isset($this->_queryStr["id"]) || !is_numeric($this->_queryStr["id"]))		{			//Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request');			exit();		}		return $this->GetPreference($this->_queryStr["id"]);	}     	//Creates a new preference	public function post()	{	    //global $dbh;		// we will dump the POST DATA		// with a message from POST METHOD		// if we get a POST call		// $this->_request->getRawBody()		// will return the $_POST DATA				if($this->_method!="POST")		{     			//when a client makes a request using an HTTP verb not supported at the requested URL 			//(supported verbs are returned in the Allow header)			header('HTTP/1.1 405 Method Not Allowed');			exit();		}		if(isset($this->_queryStr['id'])|| $this->_rawBody==false )		{			//Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request');			exit();		}		        $saved=false;				try		{			$preferences = new SimpleXMLElement($this->_rawBody);		}		catch (Exception $e)		{			//Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request - Can not read the xml');			exit();		}		$error = $this->CreatePostBody($preferences);		if ($error!="")		{			//Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request - '.$error);			exit();		}				try		{			if ($this->insertPreference()) {				$insertID = lastInsertId(); //$dbh->								if ($insertID<=0)				{					//An unexpected error occurred					header('HTTP/1.1 500 Internal Server Error');					exit();				}								$saved = true;				// $doc = new DOMDocument('1.0','UTF-8');				// $doc->formatOutput = true;				// $root_element = $doc->createElement("preference");				// $doc->appendChild($root_element);				// $id = $doc->createElement("pref_id");				// $id->appendChild($doc->createTextNode($insertID));				// $root_element->appendChild($id);								//Successful request when something is created at another URL 				header('HTTP/1.1 201 Created');				return $this->GetPreference($insertID); //$doc;			}		}		catch (Exception $e)		{			//An unexpected error occurred			header('HTTP/1.1 500 Internal Server Error');			exit();		}	}		//Updates an existing preference	public function put()	{		if($this->_method!="PUT")		{     			//when a client makes a request using an HTTP verb not supported at the requested URL 			//(supported verbs are returned in the Allow header)			header('HTTP/1.1 405 Method Not Allowed');			exit();		}		if(!isset($this->_queryStr['id']) || !is_numeric($this->_queryStr["id"])|| $this->_rawBody==false )		{			//Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request');			exit();		}		    $saved=false;				try		{					$preferences = new SimpleXMLElement($this->_rawBody);					}		catch (Exception $e)		{			//Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request - Can not read the xml');			exit();		}		$error = $this->CreatePostBody($preferences);		if ($error!="")		{			//Incorrect parameters specified on request			header('HTTP/1.1 400 Bad Request - '.$error);			exit();		}				try		{			if ($this->updatePreference()) {				$saved = true;				//Successful request when something is updated at another URL 				header('HTTP/1.1 200 OK - Updated successfully');				return $this->GetPreference($this->_queryStr["id"]);//exit();			}		}		catch (Exception $e)		{			//An unexpected error occurred			header('HTTP/1.1 500 Internal Server Error');			exit();		}	}		/*public  function delete()	{			$data = $this->_request->getRawBody();	            return "FROM DELETE METHOD.\n" . 			var_export($data, true);	}	    */}